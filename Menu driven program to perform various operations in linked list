#include<stdio.h>
#include<stdlib.h>
struct node
{	int data;
	struct node*next;
};
struct node *start=NULL;
void insertatbegin(int);
void insertatend(int);
void deletefrombegin();
void deletefromend();
void traverse();
void main()
{	int ch,e,m;
	while(1)
	{	printf("Menu\n1-Insertion at the begining\n2-Insertion at the end\n3-Deletion from the begining\n4-Deletion from the end\n5-Traversing the link list\n6-Exit");
		scanf("%d",&ch);
		switch(ch)
		{	case 1:printf("\nEnter the element to be inserted");
				   scanf("%d",&e);
				   insertatbegin(e);
				   break;
			case 2:printf("\nEnter the element to be inserted");
				   scanf("%d",&e);
				   insertatend(e);
				   break;
			case 3:deletefrombegin();
				   break;
			case 4:deletefromend();
			       break;
			case 5:traverse();
				   break;
			case 6:exit(0);
		}
		
	}
}
void insertatbegin(int x)
{	struct node*t;
	t=(struct node*)malloc(1*sizeof (struct node));
	t->data=x;
	if (start==NULL)
	{	start=t;
		t->next=NULL;
	}
	else
	{	t->next=start;
		start=t;
	}
}
void insertatend(int x)
{	struct node*t,*p;
	t=(struct node*)malloc(1*sizeof (struct node));
	t->data=x;
	t->next=NULL;
	if(start==NULL)
	{	start=t;
	}
	else
	{
		p=start;
	while(p->next!=NULL)
	{	p=p->next;
	}
		p->next=t;
	}
	}
void deletefrombegin()
{	if(start==NULL)
	{	printf("\nLink list is empty");
	}
	else
	{start=start->next;
	}
}
void deletefromend()
{	
	struct node *p,*loc;
	p=start;
	if(start==NULL)
	{	printf("\nLink list is empty");
	}
	else if(start->next==NULL)
	{	start=NULL;
	}
	else
	{while(p->next!=NULL)
	{	loc=p;
		p=p->next;
	}
	}
	loc->next=NULL;
}
void traverse()
{	struct node *p;
	p=start;
	while(p->next!=NULL)
	{	printf("%d->",p->data);
		p=p->next;
	}
	printf("%d",p->data);
}
